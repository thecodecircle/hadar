const urlParams = new URLSearchParams(window.location.search);
const locale = urlParams.get('locale');
let radius, no_gps, report;
switch (locale) {
    case "he":
        radius_msg = "אתםן נמצאים ברדיוס של %{radius} מטר מהנקודה הזו"
        no_gps = "למה לא לתת לנו את המיקום? אנחנו מאוד נחמדים, ושום מידע לא מגיע לצוקרברג המניאק"
        report = "דיווח על אירוע ב"
        break;
    case "en":
        radius_msg = "You are in a radius of %{radius} meters from this point"
        no_gps = "Why not give us your location? We're very nice, and none of your information will go to that asshole Zuckerburg"
        report = "Report an event at "
        break;
    case "ar":
        radius_msg = "אתםן נמצאים ברדיוס של %{radius} מטר מהנקודה הזו"
        no_gps = "למה לא לתת לנו את המיקום? אנחנו מאוד נחמדים, ושום מידע לא מגיע לצוקרברג המניאק"
        report = "דיווח על אירוע ב"
        break;
    case "ru":
        radius_msg = "אתםן נמצאים ברדיוס של %{radius} מטר מהנקודה הזו"
        no_gps = "למה לא לתת לנו את המיקום? אנחנו מאוד נחמדים, ושום מידע לא מגיע לצוקרברג המניאק"
        report = "דיווח על אירוע ב"
        break;
}
var map = L.map("map", {
    center: [32.813764236164246, 34.99735056504973],
    zoom: 13
});
var OpenStreetMap_Mapnik = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    maxZoom: 19,
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
});
OpenStreetMap_Mapnik.addTo(map);
<%# events = Event.where(status: :approved).where.not(lat: nil).where.not(long: nil).order(created_at: :desc) %>
let marker;
<%# events.each do |event| %>
  // marker = L.marker([<%# event.lat %>, <%# event.long %>]).addTo(map);
  // console.log("<%# event.description %>");
  // marker.bindPopup(`<%# event.date.strftime("%d/%m") %> | <%# event.time.strftime("%H:%M") %>: <%# event.description %>`).openPopup();
<%# end %>

fetch('/events.json')
  .then(response => response.json())
  .then(data => {
    data.forEach(event => {
      marker = L.marker([event.lat, event.long]).addTo(map)
      marker.bindPopup(`${event.date} | ${event.time}: ${event.description}`).openPopup()
    })
  });

function onLocationFound(e) {
    var radius = e.accuracy;
    L.marker(e.latlng).addTo(map)
        .bindPopup(radius_msg.replace("%{radius}", radius)).openPopup();
    L.circle(e.latlng, radius).addTo(map);
}

function onLocationError(e) {
    alert(no_gps);
}
var popup = L.popup();

function onMapClick(e) {
    var httpRequest = new XMLHttpRequest()
    var url = "https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=" + e.latlng.lat + "&lon=" + e.latlng.lng
    httpRequest.open('GET', url)
    httpRequest.send()
    var address = {}
    httpRequest.onreadystatechange = function(data) {
        address = JSON.parse(httpRequest.response).address
        popup
            .setLatLng(e.latlng)
            .setContent("<a href='/events/new?lat=" + e.latlng.lat + "&lng=" + e.latlng.lng + "&street=" + address.road + "&locale=" + locale + "'>" + report + address.road + "</a>")
            .openOn(map);
    }
}
map.addControl(new L.Control.Fullscreen());

map.on('click', onMapClick);
map.on('locationfound', onLocationFound);
map.on('locationerror', onLocationError);
map.locate({
    setView: true,
    maxZoom: 16
});
